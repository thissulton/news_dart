import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class EditArticlePage extends StatefulWidget {
  final String articleId;
  final String initialTitle;
  final String initialContent;
  final String initialCategory;

  const EditArticlePage({
    Key? key,
    required this.articleId,
    required this.initialTitle,
    required this.initialContent,
    required this.initialCategory,
  }) : super(key: key);

  @override
  _EditArticlePageState createState() => _EditArticlePageState();
}

class _EditArticlePageState extends State<EditArticlePage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _titleController;
  late TextEditingController _contentController;
  late TextEditingController _categoryController;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.initialTitle);
    _contentController = TextEditingController(text: widget.initialContent);
    _categoryController = TextEditingController(text: widget.initialCategory);
  }

  @override
  void dispose() {
    _titleController.dispose();
    _contentController.dispose();
    _categoryController.dispose();
    super.dispose();
  }

  Future<void> _updateArticle() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      const String baseUrl = 'https://rest-api-berita.vercel.app/api/v1';
      final String token = await _getUserToken(); // Implement your token retrieval

      final updatedArticle = {
        'title': _titleController.text,
        'content': _contentController.text,
        'category': _categoryController.text,
      };

      final response = await http.put(
        Uri.parse('$baseUrl/articles/${widget.articleId}'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode(updatedArticle),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Artikel berhasil diperbarui')),
        );
        Navigator.pop(context, true); // Return true to indicate success
      } else {
        throw Exception('Failed to update article: ${response.body}');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Gagal memperbarui artikel: $e')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // Implement this method according to your auth system
  Future<String> _getUserToken() async {
    // Example: Get token from SharedPreferences
    // final prefs = await SharedPreferences.getInstance();
    // return prefs.getString('token') ?? '';
    return 'your-token-here'; // Replace with actual token retrieval
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit Artikel'),
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            onPressed: _isLoading ? null : _updateArticle,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    TextFormField(
                      controller: _titleController,
                      decoration: const InputDecoration(
                        labelText: 'Judul Artikel',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) =>
                          value!.isEmpty ? 'Judul tidak boleh kosong' : null,
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _categoryController,
                      decoration: const InputDecoration(
                        labelText: 'Kategori',
                        border: OutlineInputBorder(),
                      ),
                      validator: (value) =>
                          value!.isEmpty ? 'Kategori tidak boleh kosong' : null,
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _contentController,
                      maxLines: 10,
                      decoration: const InputDecoration(
                        labelText: 'Konten Artikel',
                        border: OutlineInputBorder(),
                        alignLabelWithHint: true,
                      ),
                      validator: (value) =>
                          value!.isEmpty ? 'Konten tidak boleh kosong' : null,
                    ),
                    const SizedBox(height: 24),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _isLoading ? null : _updateArticle,
                        child: _isLoading
                            ? const CircularProgressIndicator()
                            : const Text('Simpan Perubahan'),
                      ),
                    ),
                  ],
                ),
              ),
            ),
    );
  }
}

// Contoh cara memanggil halaman edit dari halaman lain:
/*
Navigator.push(
  context,
  MaterialPageRoute(
    builder: (context) => EditArticlePage(
      articleId: '123', // ID artikel dari API
      initialTitle: 'Judul Artikel',
      initialContent: 'Isi artikel yang panjang...',
      initialCategory: 'Teknologi',
    ),
  ),
).then((success) {
  if (success == true) {
    // Lakukan sesuatu jika update berhasil
    print('Artikel berhasil diupdate');
  }
});
*/